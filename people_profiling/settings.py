"""
Django settings for people_profiling project.

Generated by 'django-admin startproject' using Django 5.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
import environ
import dj_database_url
import socket
from kombu import Queue

TWITTER_API_KEY = config('TWITTER_API_KEY')
TWITTER_API_SECRET = config('TWITTER_API_SECRET', default=None)
TWITTER_BEARER_TOKEN = config('TWITTER_BEARER_TOKEN', default=None)







# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-blthnd4(&8f^lecn#%9szofuzb==&g()8m8egw-h=gtt&r1yq3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["people-profiling.onrender.com"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'profiles',
    'sherlock',
    'pages',
    'cloudinary',
    'cloudinary_storage',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'people_profiling.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'people_profiling.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

#DATABASES = {
   # 'default': {
    #    'ENGINE': 'django.db.backends.sqlite3',
    #    'NAME': BASE_DIR / 'db.sqlite3',
   # }
#}

# Simple file-based caching (good for development)
# use Memcached or Redis for production setups
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": BASE_DIR / "cache",  
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (now on Cloudinary)
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

IG_LOGIN = 'iamcarolgitonga'

SESSION_DIR = os.path.join(BASE_DIR, 'sessions')
SESSION_FILE = os.path.join(SESSION_DIR, f"{IG_LOGIN}_session")

# Where Sherlock is installed
SHERLOCK_PATH = os.path.join(BASE_DIR, 'external', 'sherlock')

# Where to store the output files
#SHERLOCK_OUTPUT = os.path.join(BASE_DIR, 'output', 'sherlock')
SHERLOCK_OUTPUT = os.path.join("/tmp", "sherlock")



#CELERY_BROKER_URL = 'redis://localhost:6379/0'   # Redis as broker
#CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
#CELERY_BROKER_URL = os.getenv("REDIS_URL",default= "redis://localhost:6379/0")
#CELERY_RESULT_BACKEND = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Default (Render Redis)
REDIS_URL = config("REDIS_URL", default="redis://red-d3egidl6ubrc73cs688g:6379")
# Local Redis (Docker)
LOCAL_REDIS_URL = "redis://localhost:6379/0"
# Detect environment
HOSTNAME = socket.gethostname().lower()
if "render" in HOSTNAME:
    # Render environment ‚Üí use hosted Redis
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL
    print("üåç Using Render Redis")
else:
    # Local environment ‚Üí use Docker Redis
    CELERY_BROKER_URL = LOCAL_REDIS_URL
    CELERY_RESULT_BACKEND = LOCAL_REDIS_URL
    print("üíª Using Local Docker Redis")
# --- Queues ---
CELERY_TASK_QUEUES = (
    Queue("default", routing_key="default"),
    Queue("tiktok", routing_key="tiktok.#"),
    Queue("instagram", routing_key="instagram.#"),
)
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_DEFAULT_ROUTING_KEY = "default"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
#TIKTOK_SESSIONID = env("TIKTOK_SESSIONID")
# ‚úÖ make it available globally
ENV = env  

DATABASES = {
    'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
}




# TikTok cookies
TIKTOK_COOKIES = {
    "sessionid": env("TIKTOK_SESSIONID", default=""),
    "s_v_web_id": env("TIKTOK_S_V_WEB_ID", default=""),
    "tt_chain_token": env("TIKTOK_TT_CHAIN_TOKEN", default=""),
}


